ONE Expressions
This article describes expressions used within ONE steps.
Places where the expressions can be used are mentioned in the description sections of the appropriate steps.
Operands
An operand is any expression with a type corresponding to a valid type for a given operation.
Operands can be divided into four categories:
Literals - Numeric, string, or logical constants (
TRUE
,
FALSE
,
UNKNOWN
(deprecated), all keywords are case-insensitive) and null literal (case-insensitive).
Columns - Defined by their names.
If there is a space character in the column name, the name must be enclosed in square brackets (
[]
).
If the step retrieves data from multiple inputs, the column names are specified using the
dot notation
format, that is,
input_name.column_name
.
If the step uses only one input, the dot notation may be omitted.
Set - Can be used only in combination with the
IN
operation where the set represents a constant expression.
A set can only occur on the right side of the
IN
operation.
Complex expressions.
Expression operands can be of a defined column type, such as
INTEGER
,
FLOAT
,
LONG
,
STRING
,
DATETIME
,
DAY
, and
BOOLEAN
.
If a number assigned to either an
INTEGER
or
LONG
variable overflows or underflows the interval of permitted values for that type (that is,
-2147483648;+2147483647
for
INTEGER
and
-9223372036854775808;+9223372036854775807
for
LONG
,) then the number wraps around the interval.
For example, the value
2147483649
assigned to an
INTEGER
variable is interpreted as
-2147483647
.
Operands are automatically converted to a wider type if needed.
This is relevant for numeric data types
INTEGER
,
LONG
, and
FLOAT
(widening
INTEGER
⇒
LONG
⇒
FLOAT
) and datetime types
DAY
and
DATETIME
(
DAY
⇒
DATETIME
).
In case of comparisons, set, and conditional operations, all operands are first converted to the most general type and then the operation is performed.
Handling null values
Operations and functions handle arguments with null value according to
SQL rules
.
One important exception is for
STRING
data type.
A null string and an empty string are considered equal, so null string arguments are handled as empty (zero length) strings.
For example,
"abc" == NULL
, or even "`abc" > NULL`, is a legal comparison and gives non-null Boolean result analogous to
"abc" == ""
, or
"abc" > ""
respectively, whereas in SQL language these expressions give both null (
UNKNOWN
) value.
Variables
The expression can be formed as a sequence of assignment expressions followed by one resulting expression.
Multiple expressions are delimited by a semicolon (
;
).
Assignment expressions have the following syntax:
variable := expression
.
The first occurrence of a variable on the left-hand side defines this variable and its type.
A reference to a variable in an expression is valid only after its definition.
Each following occurrence of a variable, including on the left-hand side of an assignment expression, must conform to the variable’s type.
Example
a := 2;
b := 4 - a;
3 * b
Operations and functions
ONE provides the following function and operation categories:
Arithmetic operations
Logical operations
Comparison operations
Set operations
Other operations
Date functions
String functions
Bitwise functions
MinMax functions
Aggregating functions
Conditional expressions
Conversion and formatting functions
Word set operation functions
Arithmetic operations
This category includes common arithmetic operations—​addition, subtraction, multiplication, and division.
The result of an arithmetic operation applied to the types
INTEGER
and/or
LONG
is always
INTEGER
or
LONG
.
The result is of type
LONG
if at least one operand was of type
LONG
.
Logical operations
Common logical operations AND, OR, XOR, and NOT (all keywords are case-insensitive).
Comparison operations
Relational operators.
Set operations
For sets, a few basic operations--
IN
,
IS IN
,
NOT IN
,
IS NOT IN
-- are implemented.
Set members are literals of types defined for columns or column names themselves.
Example
company IN {"Smith inc.", "Smith Moving inc.",
            "Speedmover inc.", [candidate column], clear_column}

a IN {1, 2, 5, 10}

b IN {TRUE, FALSE}
Other operations
Date functions
In ONE, a date is represented by
DAY
and
DATETIME
types.
The
DAY
type represents a date to the detail level of days,
DATETIME
to the detail level of milliseconds.
The time values that are compatible with each format are named and described in the following table.
A day starts at 00:00:00 and ends at 23:59:59.
If a given function requires identification of a date part as parameter, the identifier is written in the expression in the form of a string literal, for example, "MONTH", otherwise the expression is evaluated as incorrect.
Identifiers are case sensitive and must be written in uppercase.
For example:
expression='dateAdd(inDate,10,"DAY")'
.
All the listed date parts are represented by positive integers.
Milliseconds are not supported by the date functions.
String functions
The following are common functions used for string processing.
Coding functions
Functions for hashing, encoding, or decoding strings.
Protegrity-related functions
To use these functions, you need to have Protegrity Application Protector for Java installed and configured.
For more information, see
Protegrity Integration
.
Math functions
Traditional mathematical functions.
They return float value and usually have one float argument.
Bitwise functions
Bitwise functions are logical operations applied on separate bits of the operands.
MinMax functions
Functions used for computation of minimum or maximum values.
Aggregating functions
Aggregating functions are special functions that can be used only in the context of ONE steps that support grouping of records.
Currently, there are two such steps:
Representative Creator
and
Group Aggregator
.
Depending on the context, expressions containing aggregate functions distinguish between two types of sources: inner, used in arguments of any aggregated function, and outer, used outside of functions.
These might be generally different, for example when the sum of a certain attribute of all records in a group is added to another attribute of a record that has an entirely different format and usage.
Every aggregating function has a variant for conditional evaluation.
The name of the variant is derived from the original name with the appended suffix
if
.
The conditional variant has one extra argument that is inserted before the original arguments and contains a Boolean expression.
The expression specifies when the appropriate record is included into aggregation.
For example, the expression
avg(salary)
can have the conditional variant
avgif(score < 100, salary)
.
Conditional expressions
Conditional expressions are a special type of expressions where the resulting value depends on the evaluation of certain conditions.
These functions do not have strictly defined argument types, instead they are flexible and their arguments are defined by the specific functionality of each expression.
Example
case (
	id is null, "_" + input + "_",
	id = 1, substr(input, length(input) / 2),
	"default value"
)

decode (
	id,
	0,
	'zero',
	1,
	'one',
	2,
	'two',
	3,
	'three'
)

iif (
	value == 2,
	'ok',
	'bad'
)

nvl (
	value1,
	value2,
	value3
)
Conversion and formatting functions
Conversion functions are used for conversions and formatting the input expression.
XML functions
Functions for working with XML formatted data.
Word set operation functions
Word set operation functions operate on two strings, interpreting them as sets of words separated by the given separator (or a space, by default) and return the integer cardinality of the resulting set or, in some cases, the resulting set itself.
If the parameter
multiset
is set to
TRUE
, the sets are treated as "multisets".
For example, two identical words in one set form two members of the set rather than one.
When
multiset
is
FALSE
(default), identical words are first deduplicated.
Three of the functions (
intersection
,
difference
,
symmetricDifference
) have variants with the prefix
lcs
(for example,
lcsIntersection
).
These variants are based on the concept that the intersection of two (word) lists is defined as the
Longest Common Subsequention
.
In this case, the order or duplicity of elements in the lists is significant.
For example, two lists
a = 'C A D B A'
and
b = 'A E B C D'
, whose "ordinary" intersection is set
'A B C D'
, have the "lcs" intersection
'A B'
(or
'C D'
,
'A D'
), and so
lcsIntersection(a, b) = 2
,
lcsDifference(a, b) = 2
(or
3
in the multiset case),
lcsSymmetricDifference(a, b) = 5
(or
6
).
The two types of difference functions can be executed with an optional integer parameter,
singularity
, which distinguishes sets that have common members from sets without common members.
When this parameter is used, the function returns a value (typically a very large number) when the sets have an empty intersection.
For example:
*
difference('A B', 'C D') = 2
: The typical result.
The difference between completely different sets might have the same value as the difference between, for example, very similar sets
'A B C D E'
and
'A B C F G'
.
*
difference('A B', 'C D', 1000) = 1000
: Using the
singularity
parameter produces a different result, which shows that the difference between completely different sets is high.
Most of the functions have a variant with the suffix
Exp
(for example,
intersectionExp
).
These variants have one appended optional argument,
comparator
.
This argument is a
functional parameter
and it defines how the elements in sets are compared to determine if they are the same.
The functional parameter must take two string values and return a Boolean result.
The result must not depend on the argument order.
The functional argument in general is similar to the function definition and has the following syntax:
(param1, param2, ..) { expression }
The columns and variables can be accessed in the function body.
When using the functional comparator, the calculation of intersection of two sets is quite different from an "ordinary" set operation, because we cannot assume the comparator conforms to the equality relation.
In both set operands A respectively B, we determine subsets A' respectively B' of members that have at least one matching member in the opposite set.
Since these subsets might have different sizes, the size of the intersection is defined as the first one.
Examples of using these functional parameters:
symmetricDifference(std_name, std_hh_names, ' ', multi)
: Ordinary comparison.
symmetricDifferenceExp(std_name, std_hh_names, ' ', multi, (x,y) { x == y })
: Ordinary comparison, equivalent to the non-
Exp
behavior.
symmetricDifferenceExp(std_name, std_hh_names, ' ', multi, (x,y) { editDistance(x,y) < 2 })
: Approximative matching, elements different at most in one error are assumed to be equal.
When
std_name = "AAA BBB AAA ABC"
and
std_hh_names = "AAB AAA CCC BBC"
and
multi = TRUE
, then the first case gives
6
(one pair of
AAA
), the second one is
6
(all three
AAA
paired), and the third one is
1
(only
CCC
remains unpaired).
Regular expressions
The syntax for regular expressions in ONE follows the rules for regular expressions used in Java, described in
Class Pattern documentation
.
The following sections contain information about regular expression usage extensions in ONE.
' @" ' - syntax (single escaping)
When writing regular expressions, take into consideration that a regular expression is manipulated as a Java string.
In literal Java strings, the backslash (
\
) is an escape character.
The literal string
\\
is a single backslash.
In regular expressions, the backslash is also an escape character.
The regular expression
\\
matches a single backslash.
As a Java string, this regular expression becomes
\\\\
.
To avoid having to use double escaping, prefix the string in quotes with an at sign (
@
).
In that case, the string between the at sign and double quotation marks (
@"some_string"
) is taken as a literal and no characters are considered escape characters in the context of the Java string.
For example, to substitute all occurrences of the caret character (
^
) and the closing bracket (
]
) with
x
in the string
ab[^]
(the expected result is the string
ab[xx
), you could use the following expression:
substituteAll("[\\^\\]]","x","ab[^]")
Or, using the ' @" ' syntax:
substituteAll(@"[\^\]]","x","ab[^]")
Capturing groups
Matching regular expressions in the input is done by analyzing the input expression string (the string resulting from applying the expression to the input).
Sections of the input string (called
capturing groups
, enclosed in parentheses) are identified and marked for further use in creating the output.
These capturing groups can be referenced using backreference.
In the case of a match, the
matched
data from the input is sent to the predefined output columns.
Each output column has a substitution property that is the value which will be sent to the output.
It can contain the previously mentioned backreferences with the following syntax:
$i
, where
i
is a number between
0
and
9`
: Backreference to a capturing group with group number lower than 10.
${i}
, where
i
is a natural number other than
0
: Backreference to a capturing group with any natural group number.
$`
: Returns the substring before the processed (matched) part of the input string.
$'
: Returns the substring after the processed (matched) part of the input string.
$&
: Returns the processed (matched) part of the input string.
$$
: returns the dollar sign characters (
$
).
The capturing groups can be used in expressions
substituteAll
,
substitutaMany
, and in the Regex Matching step.
For example, to substitute all pairs of letter-digit couples with only the digit from the couple (that is, the input string
a1b2c3d4e5
leads to the output
12345
), you could use the following expression:
substituteAll("([a-z])([0-9])","${2}","a1b2c3d4e5")
Was this page useful?
Yes
No
Thank you for your feedback!
Please let us know what we can improve
Submit
We appreciate your feedback!