{
  "title": "Http Dispatcher",
  "headers": [
    "Contents:",
    "Http Dispatcher",
    "Properties",
    "Detailed Description",
    "Element Filter Bean",
    "Properties",
    "Abstract element Filter",
    "Implementations",
    "Element Logging Filter",
    "Properties",
    "Detailed Description",
    "Element Request Response Time Logger",
    "Properties",
    "Detailed Description",
    "Enum Level",
    "Values",
    "Element Xslt Transform Filter",
    "Properties",
    "Detailed Description",
    "Element Listener Bean",
    "Properties",
    "Element Worker Queue Bean",
    "Properties"
  ],
  "content": "Defines the actions that have to be done for each incoming request. One example of a filter is logging of requests and responses, another is encryption of requests. Filters are applied on the incoming HTTP requests before they invoke the service itself.\n\nEvery filter has its own parameters in theMappingssubsection with subelements that define conditions when the filter will be activated, such as which listener is used to accept the request, url prefix of the request and set of tests that must all succeed. If theMappingsare not specified, the filter will be mapped to all listeners and all requests.\n\nIf the request conforms to several patterns, the filters will be applied in the order of appearance in the filters section.\n\nBasic component that enables communication via HTTP protocol and responds to HTTP requests. It receives all HTTP requests, distributes them for processing to deployed services, and initiates request role resolution.\n\nThe incoming HTTP request is analyzed, and if it contains an Authorization header, the username and password is extracted. Then the dispatcher contacts theAuthentication Service Componenton the server and resolves user roles assigned according to the provided username, password and IP address of the incoming request. Resolved roles are stored into the request context and may be used later in theOnline Services Componentto check if access to the service should be allowed or not.\n\nThe component is required by many other components which register themselves into\n\t\t\t\tHttp Dispatcher on the specified URL path so that the HttpDispatcher can redirect handling of\n\t\t\t\trequests.\n\nDefines the actions that have to be done for each incoming request. One example of a filter is logging of requests and responses, another is encryption of requests. Filters are applied on the incoming HTTP requests before they invoke the service itself.\n\nEvery filter has its own parameters in theMappingssubsection with subelements that define conditions when the filter will be activated, such as which listener is used to accept the request, url prefix of the request and set of tests that must all succeed. If theMappingsare not specified, the filter will be mapped to all listeners and all requests.\n\nIf the request conforms to several patterns, the filters will be applied in the order of appearance in the filters section.\n\nFile to log to. The file can contain date format parts in the${pattern}form, wherepatternfollows the Java SimpleDateFormat class formatting. For example, defining the log file asrequest__${yyyyMMdd}.logcreates a new log file every day.\n\nIfLog Filecontains date format part, that part is evaluated for every request and thus enables log rotation."
}