{
  "title": "Step Json Parser",
  "headers": [
    "Contents:",
    "Step Json Parser",
    "Properties",
    "Endpoints",
    "Detailed Description",
    "Element Data Format Parameters",
    "Properties",
    "Detailed Description",
    "Element Root Json Stream Config",
    "Properties",
    "Scoring",
    "Element Attribute",
    "Properties",
    "Enum Column Type",
    "Values",
    "Element Child Json Stream Config",
    "Properties",
    "Scoring",
    "Element Shadow Column Def",
    "Properties"
  ],
  "content": "Data format parameters are parameters used for data formatting when an\n\t\t\t\tinternal/external data format conversion is required. This task typically\n\t\t\t\toccurs when [branding:product.name.abbreviation] needs to load data from an external file or needs to store\n\t\t\t\tdata to an external file. Data format parameters then describe how\n\t\t\t\tto convert data to the desired form based on the reading and writing file data formats.\n\nProcessing steps supporting DataFormatParameters (DFP) can define DFP at the top level\n\t\t\t\tof a step as well as on the \"local\" level of each column. If there are no\n\t\t\t\tDFP defined on the local level, the global DFP are used. If global data format parameters\n\t\t\t\tare not defined, the default values are assumed. When a column defines its own DFP,\n\t\t\t\tthis DFP must contain all attributes needed for successful parsing (those attributes\n\t\t\t\tmust be assigned valid values). The only exception to this rule isThousands Separator.\n\t\t\t\tIn contrast with the rest of DFP attributes that must always have some value,Thousands Separatormay remain empty (meaning that no thousands\n\t\t\t\tseparator is used).\n\nDefines the locale for parsing non-numerical data (for example short forms of months in dates -\n\t\t\t\te.g., Sep 18, 1999). The value is the same as the value of the corresponding locale in Java\n\t\t\t\t(for detail seeJava locales).\n\nDefines the format that should be used for processing 'datetime' data. The template is\n\t\t\t\tbased onSimpleDateFormat, which uses the Java convention.\n\nDefines the format that should be used for processing 'date' data. The template is based onSimpleDateFormat, which uses the Java convention.\n\nDefines what character is used as the decimal separator.Escaped string property.\n\nString value that represents a logical 'false' value in the given data. The comparison is\n\t\t\t\tnot case sensitive.\n\nDefines the string that represents the thousands separator (used in numbers). A non-escaped\n\t\t\t\tcharacter is expected. Numbers to be read do not need to contain this separator, but\n\t\t\t\twhen the separator is present it is processed (stripped) accordingly.Escaped string property.\n\nString value representing a logical 'true' value in the given data. The comparison is not case\n\t\t\t\tsensitive.\n\nFor datetime and date types there is an existing output format defined. This format definition is given by a\n\t\t\t\t\ttextual string that follows the convention used in the JavaSimpleDateFormat.\n\nThe meanings of the most used characters in the formatting string are as follows:y ... year, M ... month in year, d ... day in month. By changing the number of those\n\t\t\t\t\tformatting characters it is possible to change the meaning of the characters.NOTE: the formatting string is case sensitive, so the same character has different\n\t\t\t\t\tmeaning when used as upper or lower case.\n\nReading a year:If the formatting string contains more than two characters, then the input number\n\t\t\t\t\tis interpreted as is, without accounting for the century.If the formatting string contains a shortened version (\"y\" or \"yy\"), then the input\n\t\t\t\t\tnumber is parsed against the current data where the resulting date is in the range -80, +20 years\n\t\t\t\t\tfrom the current date. It is important to note that the number of digits in the year must\n\t\t\t\t\tstrictly comply with the number of its formatting characters. Otherwise, the year is\n\t\t\t\t\tread as specified in the input (for format '..yy' and input '...765' the\n\t\t\t\t\tresulting year is 765.\n\nYear output format:If the formatting string includes the \"yy\" form, then the year is transformed into 2 characters,\n\t\t\t\t\totherwise it is formatted as the original number (including completion).\n\nMonth output format:If the number of formatting characters for month is >=3,\n\t\t\t\t\tthen the output is the full month's name (for example, January), otherwise the output\n\t\t\t\t\tis represented by the number (so, for January, it is 1).\n\nNumerical output format:Numerical padding functionality dictates there must be at least as many characters representing the\n\t\t\t\t\tdigits of the number as contained in the biggest number to be displayed. Shorter numbers\n\t\t\t\t\tare filled with zeroes from the left.\n\nWhen formatting numbers, a number is represented by a template containing the sequence\n\t\t\t\t\tof formatting characters. Each formatting character in the template represents one digit\n\t\t\t\t\tof the number. Usually it is not necessary to specify the number of digits in the\n\t\t\t\t\ttemplate exactly (a number can have a different number of digits and will still be\n\t\t\t\t\tparsed correctly). The only exception is when there are two neighboring numbers to\n\t\t\t\t\tbe parsed. In order to determine which character belongs to which number, the parsing\n\t\t\t\t\ttemplates are applied in their exact form (and therefore the number of characters in\n\t\t\t\t\tthe template matters).\n\nProcessing date from text:If at least 4 formatting characters are specified, then the\n\t\t\t\t\tfull text form is used, otherwise the short form is used (or at least shortened -\n\t\t\t\t\tJanuary/Jan, etc). For reading, the number of formatting characters does not matter\n\t\t\t\t\tand all forms are accepted.\n\nExample of input: \"yyyy-MM-dd\" - accepts input \"1970-01-01\"Example of output: \"d.M.yyyy\" - output is 1.1.1970\n\nIt is possible to define an input/output format for types with the form\n\t\t\t\t\t\"true-text | false-text\", where true-text (or false-text respectively) is the\n\t\t\t\t\tstring representingtrue(orfalse) values. By default these\n\t\t\t\t\tvalues are set to \"true\" and \"false.\""
}