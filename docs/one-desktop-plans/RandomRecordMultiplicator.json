{
  "title": "Step Random Record Multiplicator",
  "headers": [
    "Contents:",
    "Step Random Record Multiplicator",
    "Properties",
    "Endpoints",
    "Detailed Description",
    "Abstract element Column Generator",
    "Properties",
    "Implementations",
    "Enum Column Type",
    "Values",
    "Element Composite Generator",
    "Properties",
    "Element Expression",
    "Properties",
    "Element Number from Sequence",
    "Properties",
    "Element Pattern",
    "Properties",
    "Element Random Date",
    "Properties",
    "Element Date Format",
    "Properties",
    "Element Random Pattern",
    "Properties",
    "Element String Pattern",
    "Properties",
    "Element Random String from File",
    "Properties",
    "Element Random String from Set",
    "Properties",
    "Element String Value",
    "Properties",
    "Element Random Valid Canadian SIN",
    "Properties",
    "Abstract element Random Record Count Generator Config",
    "Implementations",
    "Element Binding",
    "Properties",
    "Element Constant",
    "Properties",
    "Element Gaussian",
    "Properties",
    "Element Uniform",
    "Properties"
  ],
  "content": "Column value is randomly generated from pattern. Pattern can consist of:\n\nStandard English alphabet is used forany letter. Example:[:alpha:][:alnum:]{2,10}@(gmail|hotmail|yahoo|aol).com\n\nFollowing table lists most useful tokens:\n\nSeedocumentation of SimpleDateFormat\n\nBecause gaussian distribution has no minimum or maximum, number of child records can be limited - \n\t\t\trandom number is generated until it is betweenminRecordCountandmaxRecordCount(inclusive).\n\t\t\tTherefore it is wise to havemeanbetweenminRecordCountandmaxRecordCountto avoid infinite loop.\n\nUnfortunately Java implementation of gaussian distribution is flawed so that with mean=0 and standardDeviation=1 generated numbers will be all between -6 and 6."
}