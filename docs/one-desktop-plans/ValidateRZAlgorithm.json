{
  "title": "Step Validate RZ CZ",
  "headers": [
    "Contents:",
    "Step Validate RZ CZ",
    "Properties",
    "Endpoints",
    "Scoring",
    "Detailed Description",
    "Example"
  ],
  "content": "RZ patternsAs the extension to the formats desribed above, the algorithm allows to define custom RZ patterns : a set of patterns\n\t\t\tto be used first when validating the input. If the input value matches any of these patterns, it is considered valid\n\t\t\tand no further checks are performed. The outputOut Rz Typeis then set to theCUSTOM_PATTERNvalue. Custom patterns are processed as the first ones, so they override any other patterns used by the algorithm (e.g. \n\t\t\tinternal patterns used to determine special RZ forms as defined by law etc.).The primary reason of the rzPatterns is to provide a way how to accept inputs which wouldn't be normally accepted\n\t\t\tbecause they do not meet the other rules (e.g. some new exception to RZ in the future etc.).RZ patterns syntaxN- positive integral number {123456789}D- integral number {0123456789}R- letter of the region (see law from 2004): {ABCEHJKLMPSTUZ}A- alphabet - the pack of allowed characters that can be used in RZ: {ABCDEFHIJKLMNPRSTVXYZ}L- letter - {ABCDEFGHIJKLMNOPQRSTUVWXYZ}X- alphanumeric value - any valueAorDThe user's pattern can also contain the exact-character-rule enclosed in apostrophes such as'X', \n\t\t\twhereXis any character.\n\nDescription of the input processingFirst phase - validation against the new RZ forms:This phase consists of the following checks (in this order):check user patternscheck special forms of RZ as defined by lawcheck common form of the RZ as defined by lawNo character fixing is performed in this phase, since the new RZ format is too generic. It is not possible to reliably recognize\n\t\t\tpossible typos from the correctly spelled characters.Second phase - validation against the old SPZ forms:This phase is run when:input string does not pass any of the checks in the first phasexthe input string only complies to the too generic checks of the first phase so there's possible ambiguity\n\t\t\t     (e.g. new RZ \"manipulative\" vs. old SPZ form).The part of the checks in this phase is also an attempt to fix incorrectly spelled characters. The fixing operation can be performed\n\t\t\there since the old SPZ had fixed format so it is possible to reliably determine what character (letter vs. digit) should be at\n\t\t\twhich position (in order to comply with the SPZ rules).\n\t\t\tFixing consists of transforming letters to the digits and vice versa using these transformation pairs:B<->8I<->1O<->0S<->5Z<->2If the input passes just one of the phases, then it is assigned to the phase's era (new format vs. old format).If there's ambiguity when deciding whether given input represents old or new format, the input year hint is used. \n\t\t\tIf no input hint is\tavailable then the old SPZs are preferred (since the number of old SPZ \"in the wild\" is probably \n\t\t\tmuch higher then the amount of special RZs they can be confused with)."
}