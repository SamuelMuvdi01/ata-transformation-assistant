{
  "title": "Basic Server Components",
  "headers": [
    "Basic Server Components",
    "Contents:",
    "HttpDispatcher",
    "listeners",
    "filters",
    "workerQueues",
    "OnlineServicesComponent",
    "WebConsoleComponent"
  ],
  "content": "The HttpDispatcher component receives all HTTP requests and distributes them for processing \n\tto deployed services. It will also initiate request role resolution. The incoming HTTP request \n\tis analyzed and, if it contains anAuthorizationheader, the username and password is \n\textracted. Then the dispatcher contacts the Authentication Service on the server and resolves \n\tuser roles assigned according to the provided username, password and IP address of the \n\tincoming request. Resolved roles are stored in to the request context and may be used later in \n\tthe OnlineServicesComponent to check if access to the service should be allowed or not. Details \n\tabout how to define users and roles can be found in the section describing theuser authentication and role assignment.\n\nThe configuration has three different parts.listenersfiltersworkerQueues\n\nEvery filter has except its own parameters themappingssub section with sub elements that define \n\tconditions when the filter will be activated, such as while listener is used to accept the request, url prefix \n\tof the request and set of tests that must all succeed. If themappingssection is missing the filter \n\twill be mapped to all listeners and all the requests.\n\nIf the request conforms to more patterns, the filters will be applied in the order of appearance \n\tin filters section.\n\nThe filter in the example above has following properties:logFile - which file to log to, can contain date format parts in form ${pattern}, where pattern follows Java SimpleDateFormat class formattingappendLog - if true, then when starting the server the contents of logFile are \n\t\t\t\tnot removed, otherwise the contents are removedmaxResponseLogSize - max size in bytes of response logged; if the size of the \n\t\t\t\tresponse is bigger then only the part up to the size maxResponseLogSize is loggedmaxRequestLogSize - max size in bytes of request logged; the same as above.\n\nIf logFile contains date format part, that part is evaluated for every request and thus enables log rotation.\n\nTheworkerQueuessection is useful to define dedicated thread pools to some\n\tservices or requests. The workerQueue hasmappingssub section with sub elements that define \n\tconditions when the worker queue will be activated. Description of mappings section is the same as for filters \n\tdescribedhere.\n\tIf themappingssection is missing the filter will be mapped to all listeners \n\tand all the requests. Except themappingssection, every workerQueue definition \n\thas its own name and following parameters:\n\nIf the queue of the waiting requests is full, than the server responds with \"Server is to busy\" \n\terror message (HTTP code 503). If the requests has been waiting for execution more than specified \n\tby therequestTimeoutparameter, the server responds with \"The request has already \n\texpired\" error message (HTTP code 408).\n\nThe OnlineServicesComponent is the component responsible for initializing and deploying all services \n\twhich should be available for online requests. The configuration expects the path to the file system \n\tfolder(s) which contain all necessary configuration files. List of these folders is specified insideserviceLookupFolderselement. The paths are relative to the location of the ServerConfig.xml \n\tfile or absolute paths.\n\nRemember, if your configuration updates or produces any files that are stored in the versioned folder \n\t(including log files), it will directly modify the temporary copy of the file somewhere in the temporary \n\tfolder and in the moment when the server will be stopped or the configuration will be changed and service \n\trestarted all such changes will be lost, because temporary folders and its content will be deleted.Therefore itnot recommendedto produce any outputs or modify files inside that are in versioned \n\tfolders. Versioned folders are useful for changes that are done outside the running server.\n\nIn order to be able to change some configuration files without the need to stop or restart the \n\tonline server, all files and directories located in folders\tspecified in versionedFolders section ofVersionedFileSystemComponentwill be copied into the temporary file system and the server will \n\tread and/or lock them in the temporary file\tsystem. This enables the possibility to modify the files \n\tin the original configuration folder.\n\tFor example, you can change some lookup files without immediately affecting the running \n\tserver. When you finish all changes you can apply them at once using therefreshcommand\n\tin theOnlineCtlcommand line tool or by using/admin/refreshCfgpage.\n\nThe OnlineServiceComponent has optional parameterlistenersthat contains comma-separated \n\tlist of the names of http listeners, to which all the service handlers should be registered. If the attribute \n\tis missing all services will be deployed on all listeners.\n\nThe WebConsoleComponent enables the module that provides information about the server and \n\tservices deployed on the server. Admin Center (formerly also known as web console) also gives you information about used memory \n\tand enables the ability to change some parameters of the deployed services.\n\tThe component has one optional parameterlistenerswhich contains comma-separated list\n\tof names of http listeners where should be the Admin Center accessible. If the attribute is missing the\n\tAdmin Center will be deployed on all listeners.\n\nIt is possible to specify custom menu items (pointing to external servers and/or documents) in the Admin Center \n\tin server config. Custom menu items and categories are cofigured by elementscustomMenuCategoriesandcustomMenuItems.<component class=\"com.ataccama.dqc.web.console.WebConsoleComponent\" listeners=\"all\">\n  <customMenuCategories>\n    <category key=\"cat1\" label=\"My Category1\"/>\n    <category key=\"cat2\" label=\"My Category2\"/>\n  </customMenuCategories>\n  <customMenuItems>\n    <item categoryKey=\"cat1\" label=\"Item 1\" url=\"http://mail.google.com/\"/>\n    <item categoryKey=\"cat2\" labelKey=\"label.item2\" url=\"http://www.google.com/\"/>\n    <item categoryKey=\"wc.menu.group.resources\" label=\"custom item1\" url=\"abcde\"/>\n    <item categoryKey=\"wc.menu.group.resources\" label=\"custom item2\" url=\"/abcde\"/>\n  </customMenuItems>\n</component>"
}