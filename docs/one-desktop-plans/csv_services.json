{
  "title": "CSV services",
  "headers": [
    "CSV services",
    "Contents:",
    "CSV services introduction",
    "CSV format description",
    "CSV Input Format",
    "CSV Output Format",
    "csvColumn",
    "Example"
  ],
  "content": "CSV format may be used in connection with one of the generic methods (GenericHttpMethod, GenericJmsMethod). \n\tGeneric method make it possible to define service that has for exampleXML formaton the input andCSV formaton the output or any other combination of the supported \n\tformats (XML,JSON,CSV,multipart).\n\nWhen using CSV format, data are organized in the same way as CSV files (comma-separated\tvalues). This means \n\tthat data records are separated by rows which contain fields separated by a special character.\n\nThis format has the following parameters:encoding- (required) encoding used for the CSV formatted input/output. The default value\n\t\t\tisUTF-8.fieldSeparator- (required) contains the character used as a separator between individual \n\t\t\tfields on the same line, i.e. of the same record (e.g. \";\").lineSeparator- (required) contains the character sequence used as a line separator in \n\t\t\tthe CSV file (e.g. \"\\n\\r\").maximalLength- (required) sets the maximum length of the input line. If \n\t\t\tthe input contains a line that has more characters, processing will end with an \n\t\t\terror. Put 0 here if you want to ignore this setting.stepId- (not required) value which defines the default name of the Integration Input Step \n\t\t\tor Integration Output Step (depending on whether it is used in the input or output \n\t\t\tsection). It is used in case that nostepIdis specified for the individual \n\t\t\tcolumn.stringQualifier- (not required) contains the character that is used to \n\t\t\tdefine string data.stringQualifierEscape- (not required) contains the character used to \n\t\t\tescape the stringQualifier.useHeader- (required) boolean value indicating whether the CSV header (i.e., the first line \n\t\t\tcontaining column names) is expected or not. The default value isTrue.columns- (required) element contains the list ofcsvColumnelements with CSV column definitions.\n\nThis format has the following parameters:encoding- (required) encoding used for the CSV formatted input/output. The default value\n\t\t\tisUTF-8.fieldSeparator- (required) contains the character used as a separator between individual \n\t\t\tfields on the same line, i.e. of the same record (e.g. \";\").lineSeparator- (required) contains the character sequence used as a line separator in \n\t\t\tthe CSV file (e.g. \"\\n\\r\").stepId- (not required) value which defines the default name of the Integration Input Step \n\t\t\tor Integration Output Step (depending on whether it is used in the input or output \n\t\t\tsection). It is used in case that nostepIdis specified for the individual \n\t\t\tcolumn.stringQualifier- (not required) contains the character that is used to \n\t\t\tdefine string data.stringQualifierEscape- (not required) contains the character used to \n\t\t\tescape the stringQualifier.useHeader- (required) boolean value indicating whether the CSV header (i.e., the first line \n\t\t\tcontaining column names) is expected or not. The default value isTrue.columns- (required) element contains the list ofcsvColumnelements with CSV column definitions.\n\nThe elementcsvColumndefines the binding of fields from the CSV stream and columns \n\t\tof the input and output steps.\n\nIt has the following parameters:name- (required) contains the name of the column in the defined Integration Input Step or \n\t\t\tIntegration Output Step (depending on if it is used in the input or output section).type- (required) defines the column's data type.csvName- (not required) defines the name of the field (column) in \n\t\t\tthe CSV file. If not specified, thecsvNamewill have the same value \n\t\t\tasname.stepId- (not required) the name of the Integration Input Step or Output Step \n\t\t\tthat is used to read or write the column value. If not specified, the globalstepIddefined in theformatelement will be used."
}