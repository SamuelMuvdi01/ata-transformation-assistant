{
  "title": "Lookup Files",
  "headers": [
    "Lookup Files",
    "Contents:",
    "Introduction",
    "Lookup Table",
    "Lookup file usage summary",
    "Additional information for specific steps",
    "ValidateVINAlgorithm lookup files",
    "Convert Phone Numbers step lookup files",
    "Update Gender step lookup files"
  ],
  "content": "It is often necessary to use reference data with certain steps (to lookup values for matching purposes, for example). \n\t\tThis data must be stored in lookup files, which are created and maintained in\n\t\t[branding:product.name.abbreviation]. The process for creating lookup files involves reading the reference data from a supported \n\t\tinput type (text file, DBF file, or database) and generating the lookup file by using the Lookup Builder Step.\n\nLookup Table is a generic file for storing a table of rows. Each row has one key and zero or more additional columns.\n\t\t\tKey and additional columns can be of any supported data type. The string key can be normalized by some transformations\n\t\t\tintoMatching value, which is really stored into index.\n\nThe matching value of string key is generated by one or more following transformations (in this order),\n\t\t\tseeconfiguration:TranformationDescriptionRemove/replace charactersRemoves characters not defined assupportedCharacter.\n\t\t\t\t\t\tUnsupported characters may be replaced by defined constant.UppercaseAll letters are translated to upper case, so index allows case insensitive searching.Remove diacriticsNational letters with diacritics are replaced with theirs ascii representations.Remove repeatedSequence of same characters are collapsed into one character.Squeeze whitespacesSequence of whitespace (space, tabs and similar) characters are replaced by one space.\n\nThe row's key values need not be unique.\n\t\t\tThe file always containsIndexfor searching rows by key.\n\t\t\tThere are three types of index - hash, approximative and best distance index.Hash indexallows fast (near constant time) exact finding in large number of rows and\n\t\t\t\tcan be used for any key data type.Approximative indexcan be used forstringkey only, allows approximative search.Best distance indexis addition to string key. Allows searching using both matching value and original value of key.\n\nThe structure of the file must conform to the specific purpose in the step.\n\nGenerator:Lookup Builder\n\nThis part contains a list of the steps that require lookup\n\t\tfiles and details on how to use them. TheKey usagecolumn in table expresses how\n\t\tthe step uses the lookup file:Uniquetry to find exactly one row and retrieve some values from it. The index should be\n\t\t\t\tunique or the best distance index should be necessary to find the best matched key value.Verifyfind any matched row to verify that value exists. Lookup doesn't contain any\n\t\t\t\tadditional columns. Best distance index is applicable only\n\t\t\t\tfor retrieving of original key value (e.g. in component's verifier).Replacethe lookup file is used only as the source of string replacements.\n\t\t\t\tMust have one additional column. Both key and column must be string\n\t\t\t\tand index is not used at all (can be of any type).Approxapproximative searching can be used and approximative index should be necessary.\n\nThis part provides details on specific steps that require additional explanation or have more complex configuration requirements.\n\nInformation about what WMI and VIN codes are is not provided here. For information about these codes, refer to theVIN\n\t\t\tarticle\ton Wikipedia.\n\nAs mentioned above, the Validate VIN step needs two lookup files in order to execute successfully.\n\nThe first lookup file, referred to by thewmiFileNameproperty, must contain a WMI code as a matching\n\t\t\t\t\tvalue and akey namefor lookup in the\n\t\t\t\tVIN lookup file. The key name is a string that consists of a WMI code, amask(optional),\n\t\t\t\tfollowed by the char '_' (underscore) and a unified manufacturer name (in upper case and without\n\t\t\t\taccents).\n\nMasks- The mask starts at the fourth position of the VIN (the first 3\n\t\t\t\tcharacters are for the WMI code)\n\t\t\t\tand can consist of up to 11 characters. If no mask is defined, a default mask of *********** (11 asterisks)\n\t\t\t\tis used. An asterisk is a wildcard character that represents any character (as opposed to a specific character).  \n\t\t\t\tIf a character other than an asterisk is placed in any of the mask fields, the specified character will be used at that position. \n\t\t\t\tFor example, the mask ***6Y defines characters 6Y at 7th and 8th positions. The whole key name will then look like, for example,\n\t\t\t\tTMB***6Y_SKODA (SKODA as manufacturer name) and will match VIN TMB1236Y234567890 but not\n\t\t\t\tTMB12345234567890.\n\nThe second lookup file is referred to by thevinInfoFileNameproperty. It is indexed by the key names (the same values as in the WMI lookup file).\n\t\t\t\tIt contains, in order, these columns: key name, real name of manufacturer, car model, year that VIN was issued (in four-digit format), position of CRC number (if the VIN code contains any) and\n\t\t\t\ta position of the year number (if there is any).\n\nThe only lookup file for this step, is referred to byconversionTableFileName. The table is indexed by thesource prefixthat consists of the old prefix and the\n\t\t\tbeginning of the original number that is going to be replaced by the step. The table contains the \n\t\t\tsource prefix (the value that was indexed from), the length of the number that won't be replaced and the new\n\t\t\tprefix.\n\nExample:It is necessary to convert all numbers with the old prefix 02 that\n\t\t\tstarts at number 2 (like 02 22 93 44 23, 02 23 48 79 67) to a 9-digit national format. The table\n\t\t\tthen must have a line indexed with 022 (02 as original prefix, 2 as start number) and contain\n\t\t\t022 (source prefix), 7 (number length) and 22 (new prefix). The step then replaces 022\n\t\t\tfrom the beginning of a number with 22 from the new prefix and copies seven numbers from the original phone\n\t\t\tnumber.\n\nNumbers written in the lookup files are the ratios of males\n\t\t\tto females with the corresponding name (names are the indexed value). They\n\t\t\tare INTEGER values calculated as (male_count*1000)/(male_count+female_count).\n\t\t\tThis corresponds to 0 and small numbers for mostly female names and 1000 and large numbers for primarily male names."
}