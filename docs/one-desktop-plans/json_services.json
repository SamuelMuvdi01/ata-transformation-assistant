{
  "title": "JSON services",
  "headers": [
    "JSON services",
    "Contents:",
    "JSON services introduction",
    "JSON format description",
    "JSON rootStructure",
    "JSON structure",
    "JSON column",
    "JSON referenced column"
  ],
  "content": "JSON format may be used in connection with one of the generic methods (GenericHttpMethod, GenericJmsMethod). \n\tGeneric method make it possible to define service that has for exampleXML formaton the input andCSV formaton the output or any other combination of the supported \n\tformats (XML,JSON,CSV,multipart).\n\nJSON format is used to describe the structure of input and output data. The content of the\n\telement basically describes the structure of the JSON document which is read from the\n\tinput (or written to the output). The JSON format containsroot structure. Each structure \n\t(including root structure) may contain otherstructureandcolumnelements. Thecolumnelement describes the mapping between an json attribute \n\tcontent on input (or output) and the column defined in the step of the configuration Plan or Component.\n\nWhen the JSON document is parsed, new data records are created. New data\n\trecord is always created for the structure that defines thestepIdattribute.\n\nHaving multiple-enabled structures, each time the element in the input is repeating, \n\tnew data records are created and sent to the step identified by thestepIdattribute. \n\tA structure does not have to define thestepIdattribute only when it is already defined \n\tin one of the parentstructureelements.\n\nJSON format has the onle parameterrootStructure.\n\nThis column value can be used to correctly compose and decompose JSON documents with two or more \n\t\tnested data structures. For example, you can have a list of people where each person may have one \n\t\tor more addresses. It is possible to reference the idColumn in the person record from one of \n\t\treferencedColumns when defined in the address sub-element.\n\nIt has the following parameters:name - name of the column defined in the steptype - defines the column's data typejsonName - name of the JSON attribute where the value is read from (or written to)strategy -  defines the way how the column is serialized.There are following possibilities:Optional - column is stored as JSON attribute. If there are no data, then attribute is missingNullable - column is stored as JSON attribute, which is always present. If there are no \n\t\t\tdata, then the attribute will be set to 'null'.Required - column is stored as JSON attribute, which must be always present. Missing \n\t\t\tattribute on input is na error. If there are no data, action defined by nullHandling parameter \n\t\t\twill be takennullHandling - the parameter is visible only for output sections and defines the way how is \n\t\tsolved situation that the column value is null while the column definition says that it is required. \n\t\t\"Null handling\" may have following values:Error - processing is evaluated as an error an request is handled as an internal exceptionEmpty string -  as the column value will be set an empty stringDefault value - as the column value will be used the default value, i.e. empty string \n\t\t\tfor STRING, 0 for numbers and 1.1.1970 for date types\n\nIt has the following parameters:name - name of the target column defined in the stepreferencedStepId - identification of the step where the referenced value is read fromreferencedColumn - name of the referenced source column"
}