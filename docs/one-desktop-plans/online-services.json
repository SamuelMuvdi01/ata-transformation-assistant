{
  "title": "Online services",
  "headers": [
    "Online services",
    "Contents:",
    "Introduction",
    "Howto create SOAP service",
    "Preconditions",
    "Creating the online service configuration",
    "Renaming xml elements (xmlName attribute)",
    "Sample input message",
    "Sample output message",
    "Configuration files",
    "Running online services",
    "OnlineCtl commands",
    "Server start/stop process",
    "Reload/refresh the configuration",
    "Best practices",
    "Accessing the web service",
    "WSDL document",
    "XML schema",
    "Online service configuration",
    "ServiceBean Element",
    "Online Service Methods / Actions",
    "Input and Output Formats",
    "Service definition details"
  ],
  "content": "Online services provide SOA functionality in [branding:product.name.abbreviation]. This \n\tfunctionality is exposed as a dedicated server running one or more dedicated configurations \n\tspecially configured to adapt to an online environment.\n\nThe online service is provided by means of Web services (http://www.w3.org,\n\tSOAP over HTTP and SOAP over JMS). The server supports only the document based method. However simplified \n\tCSV formats over HTTP and JMS transport channels is available, providing  an easy, yet powerful \n\tmethod similar to batch mode. Moreover it is available the JSON format over HTTP and JMS.\n\tAdditionally,SQL clientcan be used for sending \n\tand receiving batch data from a database.\n\nThere are several steps which have to be done in order to create a configuration which will make \n\ta configuration Plan or Component available as a web service.\n\nIn this example we will create a service which will verify a person's first name and last name and \n\t\twill also return his/her phone number in the output. Assume you have created the componentphonebook.comp.\n\nThis component contains an Integration Input Step namedphonebook_inand an Integration Output Step namedphonebook_out.The Input Step has the following columns:firstname: stringlastname: stringThe Output Step has following columns:firstname: stringlastname: stringphone: string\n\nRight click on thephonebook.compitem in the Explorer tree and select the \"Publish as Online Service...\"\n\t\tmenu item. A dialog will appear. It is possible to select the service type and service style. In our example\n\t\twe will select SOAP over HTTP and single record service. It is possible to set name of the service and URL \n\t\tlocation where the service will be avalable.\n\nClick on theFinishbutton in order to create the.onlinefile with the service definition.\n\nNow the service configuration is ready to be deployed on the server. But we will first demonstrate \n\t\tanother feature. It is possible to have different column names in the online configuration and \n\t\tin the configuration Plan or Component. So we will change thexmlNameattribute of the \n\t\tinput columns.Select the firstXmlColumnelement in the input section and change thexmlNamevalue to \"firstname_in\". Then select the secondXmlColumnelement in the input section and \n \t\tchange thexmlNamevalue to \"lastname_in\". Similarly, rename thexmlNamevalues to \n\t\t\"firstname_out\" and \"lastname_out\" withXmlColumnsin the output section.\n\nNow you can try the service by running it internally on the local computer. Just open thephoneService.onlineconfiguration file and click on the \"Start\" icon in the toolbar.\n\nAs a sample input SOAP message you can use something similar to the following:<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope \n  xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n  xmlns:ns1=\"http://example.com/webservices\">\n  <soap:Body>\n    <ns1:phonebook>\n      <ns1:firstname_in>John</ns1:firstname_in>\n      <ns1:lastname_in>Smith</ns1:lastname_in>\n    </ns1:phonebook>\n  </soap:Body>\n</soap:Envelope>\n\nAnd as a result you should get something similar to the following example.<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:ns1=\"http://example.com/webservices\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <ns1:serviceResponse>\n      <ns1:phonebookResponse>\n        <ns1:firstname_out>John</ns1:firstname_out>\n        <ns1:lastname_out>Smith</ns1:lastname_out>\n        <ns1:phone_out>+1 (203) 564-1488</ns1:phone_out>\n      </ns1:phonebookResponse>\n    </ns1:serviceResponse>\n  </soap:Body>\n</soap:Envelope>\n\nThe online server contains several configuration files. All of them are XML files using the \n\tUTF-8 encoding and it is possible to create or modify them using a simple XML or text editor. \n\tThe most important configuration files are:default.serverConfigThe server configuration, which contains the definition of global parameters like \n\t\tthe web service port, temporary folder, path variables and list of server \n\t\tcomponents. The most important components for online services areHttpDispatcherandOnlineServicesComponent.users.xmlThis is a user and role definition file that contains a list of users and roles and assignment of roles \n\t\tto the users. The location of this file is defined indefault.serverConfigin theAuthenticationServicecomponent as part ofFileBasedIdentityProvider. The user and roles definition is used for password \n\t\tprotected access to web services as well as for access restrictions on internal \n\t\tcommunication protocols used by theOnlineCtlcommand.role-mapping.xmlThis is a role definition file that contains a definition of roles assignment based on already assigned roles\n\t\tand user's IP address. The location of this file is defined inserver-config.xmlin theAuthenticationServicecomponent as part ofroleMappingProvider..online filesOnline services are defined in .online configuration files. These files are located\n\t\tin the configuration folder specified byOnlineServicesComponent.\n\t\tThe server looks for all .online files in that folder and tries to start all services.\n\t\tEach .online file contains a definition of one or more online services (as described \n\t\tlater in the sectionOnline service configuration)..plan, .compAn online service definition must always reference the service plan which contains the\n\t\tbusiness logic of the service. The location of the service plan is stored in theconfigFileattribute of theserviceBeanelement in the \n\t\t.online file. The referenced plan is either a configuration plan (.plan) or configuration component (.comp).\n\t\tNote that the referenced plan must use the IntegrationInput and IntegrationOutput steps to be able \n\t\tto receive and respond to online requests.\n\nThe server configuration, which contains the definition of global parameters like \n\t\tthe web service port, temporary folder, path variables and list of server \n\t\tcomponents. The most important components for online services areHttpDispatcherandOnlineServicesComponent.\n\nThis is a user and role definition file that contains a list of users and roles and assignment of roles \n\t\tto the users. The location of this file is defined indefault.serverConfigin theAuthenticationServicecomponent as part ofFileBasedIdentityProvider. The user and roles definition is used for password \n\t\tprotected access to web services as well as for access restrictions on internal \n\t\tcommunication protocols used by theOnlineCtlcommand.\n\nThis is a role definition file that contains a definition of roles assignment based on already assigned roles\n\t\tand user's IP address. The location of this file is defined inserver-config.xmlin theAuthenticationServicecomponent as part ofroleMappingProvider.\n\nOnline services are defined in .online configuration files. These files are located\n\t\tin the configuration folder specified byOnlineServicesComponent.\n\t\tThe server looks for all .online files in that folder and tries to start all services.\n\t\tEach .online file contains a definition of one or more online services (as described \n\t\tlater in the sectionOnline service configuration).\n\nAn online service definition must always reference the service plan which contains the\n\t\tbusiness logic of the service. The location of the service plan is stored in theconfigFileattribute of theserviceBeanelement in the \n\t\t.online file. The referenced plan is either a configuration plan (.plan) or configuration component (.comp).\n\t\tNote that the referenced plan must use the IntegrationInput and IntegrationOutput steps to be able \n\t\tto receive and respond to online requests.\n\nIn order to start online services it is necessary to start the online server. It is possible to \n\tstart the server from the GUI, but it is not recommended since it is not intended \n\tto be used in a production environment. It has the limitation that only one service can be started at once. \n\tAnother limitation is that it is not possible to set a custom password for \n\trestricted services requiring a user role. Starting the server directly from the GUI should only be done for \n\tdebugging purposes.\n\nThe preferred way to start online services is to use theOnlineCtlcommand line tool. This tool has\n\tparameters to start and stop the server, reload the configuration, and list information about the server \n\tstatus and deployed services. When it is executed without any parameters it will display a list of  \n\tcommand line options and parameters.\n\nTheOnlineCtltool has several parameters and options. If you run it without any \n\t\tparameters you will get the following output, presenting a brief summary on how to use it.Usage: java com.ataccama.dqc.server.bin.OnlineCtl <options> <command>\n  Options:\n    -hostname       hostname or IP address of the online server\n    -port           service port used internal communication\n    -secret         secret used for secret authentication method\n    -username       user used in password authentication method\n    -password       password used in password authentication method\n    -config         path to configuration file with server details\n    -license        path to license file which should be used for online\n                    mode\n  Basic commands:\n    listServices    Displays list of services being hosted.\n    password [-aes|-des|-desede] passphrase\n                    Uses DES or AES cipher to create the hash for the\n                    password given as second argument.\n    refresh         Refreshes versioned filesystem folders.\n    reloadServices\tReloads the configuration for online services.\n    start           Starts the online services.\n    status          Displays whether the server is online or not.\n    stop            Stops the online services.\n\nDescription of commands:startjava com.ataccama.dqc.server.bin.OnlineCtl -config default.serverConfig startStarts the online server and services defined in the configuration files described in the \n\t\t\tgiven server configuration file.stopjava com.ataccama.dqc.server.bin.OnlineCtl -config default.serverConfig stopjava com.ataccama.dqc.server.bin.OnlineCtl -hostname localhost -port 7777 stopStops the currently running online server and all its services. In the first example above, \n\t\t\tthe server configuration file is provided in order to get the server port number and \n\t\t\tauthentication configuration.refreshjava com.ataccama.dqc.server.bin.OnlineCtl -config default.serverConfig refreshServer loads data from folders specified under Versioned File System Component. Once new version\n\t\t\t\tof files are completely loaded and validated, server (online services, plans) starts using them.reloadServicesjava com.ataccama.dqc.server.bin.OnlineCtl -config default.serverConfig reloadServicesInstructs the server to reload the online service configuration. The server looks for files \n\t\t\twith a .online extension. The configuration files can be divided into three groups: new\n\t\t\t.online files, deleted files and modified files. Services defined in files which \n\t\t\thave been deleted will be stopped, services defined in files which are new will be \n\t\t\tstarted and services defined in files which existed before the refresh command \n\t\t\twas executed will reload all of their configuration files.While modified services are being reloaded, all services will still respond to \n\t\t\tincoming requests with the old configuration until the new configuration is successfully \n\t\t\tloaded. Once it is loaded service requests will be redirected to the new \n\t\t\tconfiguration and the old one will be released from memory.If it is not possible to load some of the new configuration (because of a \n\t\t\tconfiguration error, insufficient memory or disk space, network problems when connecting to \n\t\t\tthe databases, etc.) the server will switch completely to the previous configuration that  \n\t\t\tworked before the refresh command was invoked, i.e. all changes in services defined \n\t\t\tin all .online files will remain in the same state as before and you have to invoke the \n\t\t\trefresh command again after you fix the problem.statusjava com.ataccama.dqc.server.bin.OnlineCtl -config default.serverConfig statusIndicates whether the online server is running or not.listServicesjava com.ataccama.dqc.server.bin.OnlineCtl -config default.sserverConfig listServicesLists the services running on the online server (when the server is started).passwordjava com.ataccama.dqc.server.bin.OnlineCtl  [-aes|-des|-desede] passphrasePrints the encoded password to the output. Optionally it is possible to select encryption \n\t\t\tmethod that will be used. You can use this encoded password string in the configuration ofFileBasedIdentityProviderto set the password for a user.\n\nStarts the online server and services defined in the configuration files described in the \n\t\t\tgiven server configuration file.\n\nStops the currently running online server and all its services. In the first example above, \n\t\t\tthe server configuration file is provided in order to get the server port number and \n\t\t\tauthentication configuration.\n\nServer loads data from folders specified under Versioned File System Component. Once new version\n\t\t\t\tof files are completely loaded and validated, server (online services, plans) starts using them.\n\nInstructs the server to reload the online service configuration. The server looks for files \n\t\t\twith a .online extension. The configuration files can be divided into three groups: new\n\t\t\t.online files, deleted files and modified files. Services defined in files which \n\t\t\thave been deleted will be stopped, services defined in files which are new will be \n\t\t\tstarted and services defined in files which existed before the refresh command \n\t\t\twas executed will reload all of their configuration files.\n\nWhile modified services are being reloaded, all services will still respond to \n\t\t\tincoming requests with the old configuration until the new configuration is successfully \n\t\t\tloaded. Once it is loaded service requests will be redirected to the new \n\t\t\tconfiguration and the old one will be released from memory.\n\nIf it is not possible to load some of the new configuration (because of a \n\t\t\tconfiguration error, insufficient memory or disk space, network problems when connecting to \n\t\t\tthe databases, etc.) the server will switch completely to the previous configuration that  \n\t\t\tworked before the refresh command was invoked, i.e. all changes in services defined \n\t\t\tin all .online files will remain in the same state as before and you have to invoke the \n\t\t\trefresh command again after you fix the problem.\n\nIndicates whether the online server is running or not.\n\nLists the services running on the online server (when the server is started).\n\nPrints the encoded password to the output. Optionally it is possible to select encryption \n\t\t\tmethod that will be used. You can use this encoded password string in the configuration ofFileBasedIdentityProviderto set the password for a user.\n\nIf the .serverConfig file defines the usage of password protected access to the server and \n\t\tservices, you have to use the-secretor-userand-passwordcommand \n\t\tline options for all commands except thestartcommand. Otherwise the command will \n\t\tnot be executed and a \"not authorized access\" error will be reported in the log.\n\nThe server first reads the.serverConfigconfiguration \n\t\tfile specified in the command line parameter. This file describes the server components that \n\t\tshould be started and starts them. These components may use services from other \n\t\tcomponents. Online services are provided by theOnlineServicesComponent.\n\nThe OnlineServiceComponent has the parameterconfigFolderwhich points to\n\t\tthe filesystem folder containing.online files. Each \n\t\t.online file defines a set of services (usually just one) which should be started.\n\nThe OnlineServiceComponent first copies all files (including the potentially big lookup \n\t\tfiles) from the configFolder to a private sub-folder of the first temporary folder specified \n\t\tin .serverConfig file. It then looks for all .online files and tries to start all \n\t\tservices.\n\nIf it is needed to change some configuration or lookup files while the online service is running \n\t\tit is possible to list the folder which contains such configuration or lookup file in theversionedFolderssection. Folders defined in theversionedFolderssection of theVersionedFileSystemComponentwill be\ttreated similarly as the one defined inconfigFolderexcept that it will not be scanned to find .online files. This means that these folders will be copied \n\t\tto a private sub-folder\tof the temporary folder and these files may be changed and \"refreshed\" (see \n\t\tlater in this section).\n\nIf everything succeeds, the service is running from the files copied in the temporary folder, \n\t\tso you can modify the configuration and/or change the lookup files and the services will \n\t\trespond without any interruption. When your configuration changes are ready, you should use\n\t\tthe refresh command and your services will be updated.\n\nWhen the server is being stopped it will first stop all the services and then remove the \n\t\tcreated temporary sub-folder containing the previously copied configuration files. The \n\t\toriginal configuration remains untouched in theconfigFolderspecified in .serverConfig file.\n\nSometimes it is needed to change the online service configuration and other services must \n\t\tremain unchanged and continously responding to client requests or it is needed to change \n\t\tsome lookup file(s) while the service must not be stopped even for very short time. There is \n\t\ta 'refresh' and 'reload' functionality to achieve these dynamic configuration changes.\n\nThe 'refresh' command is used to detect changes in OnlineServicesComponent's configFolder \n\t\tand versionedFolders. If some changes are detected, server tries to load all services from \n\t\tnew files. If it is successful, server switches to new versions and releases the old ones \n\t\tfrom memory. If the refresh does not completely succeed, i.e. all services are successfully \n\t\tloaded, it will continue running the old version as before the 'refresh' command has been \n\t\tcalled. The detection of file changes is done by copying content of configuration folders \n\t\tto private temporary sub-folder.\n\nThe 'reload' command can be used instead of server restart. The difference between reload \n\t\tand restart is that reload stops and starts only online services and other server components\n\t\tmay be still running. Unlike refresh command, the reload command does not check if the new \n\t\tservices have valid configuration. If they don't have, the services will not be available.\n\nThe section above describes how configuration files are copied to a \n\t\ttemporary folder. As a result, it is not good practice to start two online servers with  \n\t\tthe same temporary folder, as this may cause deletion of configuration files \n\t\tfrom one online server when another server stops and cleans the temporary folder.\n\nA similar problem may occur if the second online server is started from the working directory \n\t\twhich is a sub-folder of the temporary folder of the first online server. In other words, \n\t\tmixing temporary folders with anything else is strongly discouraged because it may cause \n\t\tloss or damage of your configuration files.\n\nBecause the contents of the temporary sub-folder used as storage for configuration files is \n\t\tdeleted when the server starts, it is also not recommended to set the temporary folder to the  \n\t\tOS filesystem root because if you start the server with appropriate rights, it may delete \n\t\tthe complete filesystem.\n\nWhen the server is started you can access its services through HTTP requests. If you have configured the WebConsoleComponent\n\t you can use the web browser to look what services are deployed. Throu web requests are available\n\tWSDL documents for each configured services. It is also possible to dowload just the XML schema describing input \n\tand output requests messages.\n\nIn the following examples we suppose that the server's hostname islocalhostand it is listening on the TCP \n\tport8888. We have configured and deployed two services on locations/service1andservice2.\n\nService requests are received on the addresseshttp://localhost:8888/service1andhttp://localhost:8888/service2.\n\nIf you enter in the browser addresshttp://localhost:8888/service1you will get information page, which \n\tinforms you that the service is running. On that information page is html link to WSDL document. That WSDL document\n\tfor our first service is accessible on the addresshttp://location:8888/service1?wsdl. Similarly, the addresshttp://localhost:8888/service2andhttp://localhost:8888/service2?wsdlwill return information page\n\tfor the second service and WSDL document for the second service.\n\nIf you need to get just the XML schema describing the structure of the services's input and output messages, you \n\tcan access them on the addresshttp://localhost:8888/service1?xsd&namespace=http://www.example.com/types. \n\tNaturally, the value of thenamespaceparameter depends on the namespace configured and used in your service.\n\tIf the service is using just single namespace for the input and output, than you may ommit the namespace parameter,\n\tthus the address where the XML schema is available ishttp://localhost:8888/service1?xsd.\n\nIn case you enter the namespace which is not used by the service, server will return HTTP error code 404 - page not \n\tfound. The same error page will be returned if the service uses more than one namespace and you did not specify the \n\tnamespace.\n\nWhen the online service component starts, it looks in the configuration folder for all files \n\twith a.onlineextension and tries to start the services defined inside them.\n\nThe service configuration file may contain severalserviceBeanelements defining various services. But \n\tit is important to note that services described in a .online file have to be all started or all \n\tstopped. That means that in case of a configuration error in one of the services, it will not \n\tstart and therefore other services will also not start.\n\nMethod has following parameters:class=\"com.ataccama.dqc.online.cfg.GenericJmsMethod\" - identifies the methodconnectionName - name of the connection defined in \"server-config.xml\" file in JmsProviderComponent configurationinputDestination - name of the JMS destination (QUEUE/TOPIC) where the server will read service requests frominputDestinationType - type of the JMS input destination (QUEUE or TOPIC)outputDestination - name of the JMS destination (QUEUE/TOPIC) where the server will send service responseoutputDestinationType - type of the JMS output destination (QUEUE or TOPIC)inputFormat - describes theformatof the request messageoutputFormat - describes theformatof the response messageoutputParameters - list of output JMS parameters, its values and types that will be set in the response message\n\n[branding:product.name.abbreviation] Online services can be invoked using HTTP or JMS transport layer. \n\t\tMessage format may be used CSV, JSON, XML or its combination wrapped in multipart messages. This section\n\t\tdescribes the services using standard SOAP protocol or one of the generic service method using XML format\n\t\tfor the input and/or output messages. As the transport layer are supported HTTP/HTTPS and JMS. Both, SOAP \n\t\tand XML services are using XML format to form the content of input and output messages.\n\nIt has the following parameters:parts- element that contains a list of elements defining the content id and\n\t\t\t\tformat that defines the structure of the message part.\n\nContent of thepartcan be one of generic input or output formats. That means each part may have \n\t\t \tdifferent data structures (XML,JSONandCSV)."
}