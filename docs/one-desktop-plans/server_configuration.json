{
  "title": "Server Configuration",
  "headers": [
    "Server Configuration",
    "Contents:",
    "Introduction",
    "default.serverConfig",
    "Server Components",
    "Authentication & Authorization"
  ],
  "content": "The ServerConfig.xml configuration consists of several parts.port- port at which the internal communication requests (like shutdown) are being served.tempFolders- list of folders which may be used for temporary files. All of these folders may \n\t\tbe used by various algorithms from plan files. The first defined folder will be used\n\t\tby online services as the temporary storage for versioned folders. Therefore be sure\n\t\tthat you have enough storage space in that folder.runtimeConfiguration- Runtime configuration defines shared resources like Data Source connections (DB)\n\t\tand Path Variables. Path to the runtimeConfiguration can be either absolute or\n\t\trelative. When the path is relative then it is calculated against the folder\n\t\tcontaining the serverConfig.xml file.serverComponents- contains a list of server components running on the server. Each component is \n\t\tspecified by the elementcomponentwith a class parameter containing the full \n\t\tclass name of the component to be started. All references to other configuration files \n\t\tin this section, i.e. all component configuration, are either absolute paths or they \n\t\tare relative to the location of the ServerConfig.xml file.\n\nThe following components may be used on the server:Basic ComponentsHttpDispatcher- handles the incoming HTTP requests and sends a HTTP response\n\t\t\t- defines filters applied to incomming HTTP requests such as a logging filterOnlineServicesComponent- starts and stops online services defined in the configuration folderWebConsoleComponent- enables the Admin Center component (formerly also known as web console)Advanced ComponentsAsyncWriterComponent- defines parameters for connecting and sending records from AsyncWriter step.AuthenticationService- used for authentication of internal communication between the server and \n\t\t\texternal programs as well as to password protect access to web servicesDerbyServerComponent- starts Derby database as a part of the server.HealthStateLogger- logs all sensor status changes to the standardly configured loggerHealthStateProviders- adds several sensors that will report health status of the server's parts such as the path variables and database connectionsHealthStateWebConsole- adds section to the Admin Center (formerly also known as web console) that will display all sensor statusesJmsProviderComponent- references Jms configuration from runtime configuration fileLoggingComponent- defines the logging configuration rulesUmcManagerComponent- enables user management with User Management ComponentVersionedFileSystemComponent- defines the versioned foldersExpert ComponentsForcedShutdownComponentServerFilesystemServiceComponent- Server filesystem service implementation"
}