{
  "title": "SOAP and XML services",
  "headers": [
    "SOAP and XML services",
    "Contents:",
    "SOAP and XML services introduction",
    "Methods",
    "SOAP Over HTTP",
    "SOAP Over JMS",
    "Input/output formats",
    "SOAP Input Format / XML Input Format",
    "SOAP Output Format / XML Output Format",
    "XML format description",
    "rootSection (XML and SOAP)",
    "xmlInputSection (XML and SOAP)",
    "xmlOutputSection (XML and SOAP)",
    "xmlColumn (XML and SOAP)",
    "xmlReferencedColumn (XML and SOAP)",
    "Example"
  ],
  "content": "[branding:product.name.abbreviation] Online services can be invoked using HTTP or JMS transport layer. \n\tMessage format may be used CSV, JSON, XML or its combination wrapped in multipart messages. This section\n\tdescribes the services using standard SOAP protocol or one of the generic service method using XML format\n\tfor the input and/or output messages. As the transport layer are supported HTTP/HTTPS and JMS. Both, SOAP \n\tand XML services are using XML format to form the content of input and output messages.\n\nPlain XML format can be used in connection with one of the generic methods (GenericHttpMethod, GenericJmsMethod). \n\tGeneric method make it possible to define service that has for exampleXML formaton the input andCSV formaton the output or any other combination of the supported \n\tformats (XML,JSON,CSV,multipart).\n\nUsage of SOAP format is determined by selecting one of the SOAP method (SOAP over HTTP or SOAP over JMS) and \n\tthat selection means that XML messages will be used on input as well as on output (if the service has some). \n\tThese input/output messages will be wrapped by SOAP:Envelope, SOAP:Header and SOAP:Body\telements according toW3Cstandards. The format configuration describes the \n\tmessage inside (i.e. the content of) the SOAP:Body element.\n\nRead theHowto create SOAP servicesection for step by step example how to configure \n\tthe SOAP service.\n\nThe URL location of the service is configured in the .online service configuration file together with \n\t\tfollowing parameters:class=\"com.ataccama.dqc.online.cfg.SoapOverHttpMethod\" - identifies the methodlocation - defines the URL location where the\tservice will be deployed (i.e. the path \n\t\twhere the service is registered in HttpDispatcher).soapAction - The value defines the name of the SOAP action according to the SOAP standard.soapVersion - determines if SOAP 1.1 or SOAP 1.2 will be usedinputFormat - describes theXML formatof the input messageoutputFormat - describes theXML formatof the output message\n\nMethod has following parameters:class=\"com.ataccama.dqc.online.cfg.SoapOverJmsMethod\" - identifies the methodconnectionName - name of the connection defined in \"server-config.xml\" file in JmsProviderComponent configurationinputDestination - name of the JMS destination (QUEUE/TOPIC) where the server will read service requests frominputDestinationType - type of the JMS input destination (QUEUE or TOPIC)outputDestination - name of the JMS destination (QUEUE/TOPIC) where the server will send service responseoutputDestinationType - type of the JMS output destination (QUEUE or TOPIC)soapAction - The value defines the name of the SOAP action according to the SOAP standard.soapVersion - determines if SOAP 1.1 or SOAP 1.2 will be usedinputFormat - describes theXML formatof the request messageoutputFormat - describes theXML formatof the response messageoutputParameters - list of output JMS parameters, its values and types that will be set in the response message\n\nXML format is used to describe the structure of input and output data. The content of the configuration\telement \n\t(inputFormat or outputFormat) basically describes the structure of the XML document which is read from the\n\tinput (or written to the output). The XML format containsroot section. Each section (including root \n\tsection) may contain othersectionandcolumnelements. Thecolumnelement describes the \n\tmapping between an element or attribute\tcontent from the XML document on input (or output) and the column defined \n\tin the step of the configuration Plan or Component.\n\nWhen the XML document is parsed, new data records are created. New data\n\trecord is always created for the section that defines thestepIdattribute.\n\nHaving multiple-enabled sections, each time the \n\telement in the input is repeating, new data records are created and sent to the step identified by\n\tthestepIdattribute. A section does not have to define thestepIdattribute only when it is already defined in one of the parentsectionelements.\n\nXmlFormat has the following parameters:namespace- (required for SOAP) defines the namespace URI used for all elements in the input \n\t    (or output) XML document.schemaValidation- (only for Xml Input Format) defines whether all incoming requests may \n\t\tbe validated against XML schema (used for example in WSDL) before it is passed to the server engine. \n\t\tIf the input XML document contains attributes and/or elements that are not defined in the .online \n\t\tconfiguration, redundant attributes/elements will be either silently ignored (schemaValidation is 'false')\n\t\tor the input message will be refused with an error (schemaValidation is 'true').rootSection- (required) element that defines theXML \n\t\telementwhich is the only child of the root element of the input (or \n\t\toutput) XML document being processed. This element contains sub-elements with \n\t\tall the data from the request (or response).\n\nTherootSectionelement differs from the section element only by its name. It is\n\t\tused to describe the top element of the request (or response) content structure.\n\t\tWhen it is used inside an XML format definition it describes the top level element \n\t\tof the XML document and when used in a SOAP format definition it describes\n\t\tthe only one allowed child of theSOAP Bodyelement.\n\nThe root section defines \"stepId\", \"columns\" and \"sections\" parameters. The description\n\t\tis the dame as forinput section elementandoutput section element.\n\nThexmlInputSectionelement is used to describe non-leaf elements in the XML document.\n\t\tIt may contain other nestedxmlInputSectionelements orxmlColumndefinitions.\n\t\tIn order to describe an XML element with repeating occurrence, set the attributestrategytoMultiple optionalorMultiple requiredvalue. \n\t\tThe whole structure (including sub-sections and columns) may be repeated. When using \n\t\tmultiple-enabled sections there will be a new data record created for each repetition of \n\t\tthe section in the source document.\n\nIt has the following parameters:name- (required) defines the name of the XML element.strategy- (required) defines the strategy how to interpret the XML element.\n\t\t\tIt may have following values:Single optional- element may occur at most one in the documentSingle required- element must occur exactly once in the documentMultiple optional- element may occur repeatedly, but if there are no \n\t\t\t\tappropriate data it may be ommitedMultiple required- element may occur repeatedly. It must be present also \n\t\t\t\tin case if there are no appropriate data. In such case the element may be empty.stepId- (not required) name of the Integration Input Step (or Output Step)  \n\t\t\tin the referenced configuration Plan or Component which is used to read (or \n\t\t\twrite) data values. If not specified, the parent'sstepIdwill be used.idColumn- (not required) name of the column where the value of the\n\t\t\tinternal identifier (generated when the document is being processed) will be stored. This\n\t\t\tcolumn has to be defined in the referenced configuration and has to be ofLONGdata type.This column value can be used to correctly compose and decompose XML \n\t\t\tdocuments with two or more nested data structures. For example, you can have a  \n\t\t\tlist of people where each person may have one or more addresses. You can \n\t\t\treference the idColumn in the person record from one of referencedColumns \n\t\t\twhen defined in the address sub-element.columns- contains a list ofxmlColumndefinitions.references- contains a list ofxmlReferencedColumndefinitions.sections- contains a list of nestedxmlInputSectiondefinitions.\n\nThexmlOutputSectionelement is used to describe non-leaf elements in the XML document.\n\t\tIt may contain other nestedxmlOutputSectionelements orxmlColumndefinitions.\n\t\tIn order to describe an XML element with repeating occurrence, set the attributestrategytoMultiple optionalorMultiple requiredvalue. \n\t\tThe whole structure (including sub-sections and columns) may be repeated. When using \n\t\tmultiple-enabled sections there will be a new data record created for each repetition of \n\t\tthe section in the source document.\n\nIt has the following parameters:name- (required) defines the name of the XML element.parentReference- name of the column that contains the value which compared to id column\n\t\t\tof the parent section in order to select correct child sections. Only sections with the same \n\t\t\tvalue in column defined by the parentReference and parents idColumn are selected.strategy- (required) defines the strategy how to interpret the XML element.\n\t\t\tIt may have following values:Single optional- element may occur at most one in the documentSingle required- element must occur exactly once in the documentMultiple optional- element may occur repeatedly, but if there are no \n\t\t\t\tappropriate data it may be ommitedMultiple required- element may occur repeatedly. It must be present also \n\t\t\t\tin case if there are no appropriate data. In such case the element may be empty.stepId- (not required) name of the Integration Input Step (or Output Step)  \n\t\t\tin the referenced configuration Plan or Component which is used to read (or \n\t\t\twrite) data values. If not specified, the parent'sstepIdwill be used.idColumn- (not required) name of the column where the value of the\n\t\t\tinternal identifier (generated when the document is being processed) will be stored. This\n\t\t\tcolumn has to be defined in the referenced configuration and has to be ofLONGdata type.This column value can be used to correctly compose and decompose XML \n\t\t\tdocuments with two or more nested data structures. For example, you can have a  \n\t\t\tlist of people where each person may have one or more addresses. You can \n\t\t\treference the idColumn in the person record from one of referencedColumns \n\t\t\twhen defined in the address sub-element.columns- contains a list ofxmlColumndefinitions.sections- contains a list of nestedxmlOutputSectiondefinitions.\n\nDefines the XML element or XML attribute containing the value which will be mapped\n\t\tto the column value of the Integration Input Step (or Output Step) in the referenced \n\t\tconfiguration Plan or Component.\n\nIt has the following parameters:name- (required) name of the column defined in the step.type- (required) defines the column's data type.xmlName- (not required) name of the XML element or XML attribute \n\t\t\twhere the value is read from (or written to).strategy- (required) defines the way how the column is serialized. Whether it \n\t\t\twill be element, attribute or text node. There are following possibilities:Text node- column is stored as a text node of the parent element (section). \n\t\t\t\tThis should be used in combination with multiple section when you need to define so \n\t\t\t\tcalled 'multiple column'.Optional attribute- the column is stored as an attribute content. If the attribute \n\t\t\t\tis missing the value will be null (not set)Required attribute- the column is stored as an attribute content. Missing the \n\t\t\t\tattribute on input is an error. If value is missing for output, than action defined by \n\t\t\t\tnullHandling parameter will be  takenOptional element- column is stored as an element. If there are no data, \n\t\t\t\tthen element is missing.Required element- column is stored as an element, which must be always present. \n\t\t\t\tMissing element on input is na error. If there are no data, action defined by nullHandling \n\t\t\t\tparameter will be takenNillable element- column is stored as an element, which is always present. \n\t\t\t\tIf there are no data, then the element's attributexs:nilis set to 'true'nullHandling- the parameter is visible only for output sections and defines the way how is \n\t\t\t\t solved situation that the column value is null while the column definition says that it is \n\t\t\t\t required. \"Null handling\" may have following values:Error- processing is evaluated as an error an request is handled as an internal exceptionEmpty string- as the column value will be set an empty string. This may produce output that breaks XSD definition.Default value- as the column value will be used the default value, i.e. empty string for STRING, 0 for numbers and 1.1.1970 for date types\n\nReferenced columns are used when there is an XML document that has some sections \n\t\tthat are multiple and some value defined outside of a multiple section needs to be put in the record.\n\t\tFor example, to put the parent record identifier to the nested records in order to \n\t\tbe able later to correctly compose the output XML document.\n\nIt has the following parameters:name- (required) name of the target column defined in the step.referencedStepId- (required) identification of the step where the referenced\n\t\t\tvalue is read from.referencedColumn- (required) name of the referenced source column."
}