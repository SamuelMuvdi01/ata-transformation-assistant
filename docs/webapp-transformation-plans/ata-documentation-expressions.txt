
ONE Expressions (Optimized for RAG)

This document describes how expressions are used in Ataccama ONE transformation steps.

---

Where Expressions Are Used

Expressions can be used in multiple transformation steps. Specific usage is defined in each step’s documentation and applies to tasks like filtering, calculations, assignments, and data mapping.

---

Operand Types

Operands are values or references used within expressions. They fall into four categories:

1. Literals  
   These include constants like numbers, strings, booleans (TRUE, FALSE), and null values. All keywords are case-insensitive.

2. Columns  
   Columns are referenced by their names. Use square brackets for names containing spaces (e.g., [column name]).  
   - If the step has multiple inputs: use input_name.column_name.  
   - If the step has one input: dot notation can be omitted.

3. Set  
   Used only with the IN operation on the right-hand side (e.g., value IN {1, 2, 3}).

4. Complex Expressions  
   Can include any valid combination of operands, operators, and functions.

Supported data types: INTEGER, FLOAT, LONG, STRING, DATETIME, DAY, BOOLEAN.

Numeric types are widened automatically:  
INTEGER → LONG → FLOAT  
Date types widen as: DAY → DATETIME

If numeric values exceed type limits (overflow), they wrap around. For example, 2147483649 assigned to an INTEGER is interpreted as -2147483647.

---

Null Value Handling

Functions and operations follow SQL rules for handling NULL.  
Exception: For STRING, null and empty string are treated as equal.  
Examples:  
- "abc" == NULL is treated as "abc" == ""  
- "abc" > NULL is treated as "abc" > ""

---

Variables in Expressions

Expressions can define and reuse variables using assignment. Syntax:

variable := expression;

Variables must be defined before they are used. Each variable has a fixed type after definition.

Example:
a := 2;
b := 4 - a;
3 * b

---

Operation and Function Categories

ONE supports the following categories of operations and functions:

- Arithmetic operations  
- Logical operations  
- Comparison operations  
- Set operations  
- Other operations  
- Date functions  
- String functions  
- Bitwise functions  
- Min/Max functions  
- Aggregating functions  
- Conditional expressions  
- Conversion and formatting  
- Word set operations  
- Regular expressions  

---

Arithmetic Operations

Standard math operations: +, -, *, /  
Operands must be INTEGER, LONG, or FLOAT.  
If at least one operand is LONG, the result is LONG.

---

Logical Operations

Supported logical operators: AND, OR, XOR, NOT  
Case-insensitive.

---

Comparison Operations

Standard relational operators: =, !=, >, <, >=, <=

---

Set Operations

Supported keywords: IN, IS IN, NOT IN, IS NOT IN  
Set members can be literals or column names.

Examples:
company IN {"Smith Inc.", "Speedmover Inc."}
a IN {1, 2, 5, 10}
b IN {TRUE, FALSE}

---

Date Functions

- DAY: represents a calendar date (no time).
- DATETIME: includes date and time (to milliseconds).
- Date part identifiers must be uppercase strings (e.g., "MONTH").

Example:
dateAdd(inDate, 10, "DAY")

Milliseconds are not supported.

---

String Functions

Includes:
- Standard string manipulation
- Encoding/decoding
- Protegrity functions (requires setup)

---

Math Functions

Traditional math functions returning FLOAT. Usually take one float argument.

---

Bitwise Functions

Perform logical operations on individual bits of numeric values.

---

Min/Max Functions

Return the minimum or maximum value in a set of values.

---

Aggregating Functions

Used in steps that support grouping (Representative Creator, Group Aggregator).

Syntax:
avg(salary)
avgif(score < 100, salary)

- Aggregates can reference both grouped values (inner) and context values (outer).
- Functions have if variants for conditional aggregation.

---

Conditional Expressions

Conditional expressions return values based on evaluated conditions.

Examples:

case (
    id is null, "_" + input + "_",
    id = 1, substr(input, length(input) / 2),
    "default value"
)

decode (
    id,
    0, "zero",
    1, "one",
    2, "two",
    3, "three"
)

iif (
    value == 2,
    "ok",
    "bad"
)

nvl(value1, value2, value3)

---

Conversion and Formatting Functions

Used for converting values between types or formatting outputs.

---

XML Functions

Support for XML-formatted data processing.

---

Word Set Operation Functions

Operate on two strings as word sets. Words are separated by spaces or a custom delimiter.

Key functions:
- intersection
- difference
- symmetricDifference

Variants with lcs prefix use Longest Common Subsequence logic:
- lcsIntersection
- lcsDifference
- lcsSymmetricDifference

Set comparison can be adjusted using:
- multiset (TRUE = allow duplicates, FALSE = deduplicate)
- singularity (optional integer for scoring completely different sets)
- comparator (custom comparison logic between words)

Example with custom comparator:
symmetricDifferenceExp(std_name, std_hh_names, ' ', multi, (x, y) { editDistance(x, y) < 2 })

---

Regular Expressions

Uses Java regex syntax. Escaping is required.

To simplify escaping, use the @"..." format:
substituteAll(@"[\^\]]", "x", "ab[^]")

Capturing groups (inside (...)) can be referenced:
- $1, $2, … up to $9
- ${10}, ${11}, …
- $&: matched substring
- $`: prefix before match  
- $': suffix after match  
- $$: dollar sign

Example:
substituteAll("([a-z])([0-9])", "${2}", "a1b2c3d4e5")
// Result: 12345


Overview
This document explains expressions used in ONE transformation steps. Expressions are combinations of operands and operations that produce values. The exact places where expressions can be used are described in the relevant step documentation.

Operands
Operands are the building blocks of expressions and represent data values. They can be:

Literals:

Numeric (e.g., 123, 3.14)

String constants (e.g., "hello")

Logical constants: TRUE, FALSE, UNKNOWN (deprecated)

Null literal

Keywords are case-insensitive.

Columns:

Identified by column names.

If a name contains spaces, enclose it in square brackets [ ].

For multiple input sources, use dot notation: input_name.column_name.

For single input, dot notation can be omitted.

Sets:

Used only with the IN operation.

Represent constant sets on the right side of IN.

Example: company IN {"Smith inc.", "Speedmover inc."}

Complex expressions:

Combinations of literals, columns, and other expressions.

Operand Types and Type Conversion
Operands have specific data types:
INTEGER, LONG, FLOAT, STRING, DATETIME, DAY, BOOLEAN.

Numeric types support automatic widening:
INTEGER → LONG → FLOAT.

Date types support widening:
DAY → DATETIME.

Overflow behavior:
Numeric values exceeding type bounds wrap around.
Example: Assigning 2147483649 to an INTEGER results in -2147483647.

Comparisons and conditional operations convert operands to the most general type before evaluation.

Handling Null Values
Expressions follow standard SQL rules for NULL except for strings:

Null string is treated as an empty string "".

For example, "abc" == NULL is treated as "abc" == "" and evaluates to a non-null Boolean.

Variables and Assignments
Expressions can include variable assignments.

Syntax: variable := expression;

Variables must be defined before use.

Variable types are fixed on first assignment and subsequent assignments must match type.

Example:

css
Copy
Edit
a := 2;
b := 4 - a;
3 * b
Operations and Functions
ONE supports multiple categories:

1. Arithmetic Operations
Addition, subtraction, multiplication, division.

Result type depends on operand types, with priority for LONG.

2. Logical Operations
AND, OR, XOR, NOT (case-insensitive).

3. Comparison Operations
Relational operators like =, <, >, <=, >=, <>.

4. Set Operations
IN, IS IN, NOT IN, IS NOT IN.

Set members can be literals or column names.

5. Date Functions
DAY (date to day precision) and DATETIME (date to milliseconds).

Date parts (e.g., "MONTH") must be uppercase string literals.

Milliseconds are not supported in date functions.

6. String Functions
Common string manipulations (substring, length, concatenation, etc.).

7. Bitwise Functions
Bitwise logical operations on integer bits.

8. MinMax Functions
Compute minimum or maximum values.

9. Aggregating Functions
Used only in steps supporting grouping (Representative Creator, Group Aggregator).

Conditional variants exist with suffix if, e.g., avgif(condition, value).

10. Conditional Expressions
Flexible argument types, examples:

case(condition1, value1, condition2, value2, default_value)

decode(expr, val1, res1, val2, res2, ...)

iif(condition, true_value, false_value)

nvl(value1, value2, ...)

11. Conversion and Formatting Functions
For data type conversions and formatting.

12. XML Functions
For processing XML data.

13. Word Set Operation Functions
Operate on word sets extracted from strings.

Support multisets (counting duplicates) and longest common subsequence (LCS) operations.

Variants with functional comparators allow approximate matching.

Regular Expressions in ONE
Follows Java regex syntax (java.util.regex.Pattern).

To avoid double escaping, use @"..." syntax for literal regex strings.

Examples:
Replace caret ^ and closing bracket ] with x:
substituteAll(@"[\^\]]", "x", "ab[^]") → "ab[xx"

Capturing Groups and Backreferences
Capture groups enclosed in ( ) can be referenced in output:

$i where i is 0–9

${i} for any natural number

$, $', $&, $$ for special substrings

Used in functions like substituteAll and Regex Matching.

Example:
Replace letter-digit pairs with digits only:

bash
Copy
Edit
substituteAll("([a-z])([0-9])", "${2}", "a1b2c3d4e5") → "12345"
Summary
Expressions combine literals, columns, sets, variables, and operations.

Typed system with automatic conversions and overflow wrapping.

Supports rich functions: arithmetic, logical, date, string, set, aggregation, conditional, regex.

Regular expressions follow Java syntax with convenient literal string options.

Aggregates support conditional evaluation and grouping contexts.